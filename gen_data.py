from faker import Faker
from random import randrange, sample
from datetime import datetime

fake = Faker()

def gen_users(n):
    res = []
    for _ in range(n):
        gender = ['M', 'F'][randrange(2)]
        f_name = fake.first_name_female() if gender == 'F' else fake.first_name_male()
        l_name = fake.last_name()
        res.append(
            (
                f_name,
                l_name,
                randrange(1950, 2015),
                randrange(1, 13),
                randrange(29),
                gender,
                f_name + l_name + '@gmail.com',
                fake.image_url()
            )
        )
    return res

def gen_groups(n):
    return [
        (
            ' '.join([fake.word() for _ in range(randrange(1,4))]),
            fake.text(100)
        ) for _ in range(n)
    ]

def gen_topics(n):
    return [
        (
            ' '.join([fake.word() for _ in range(randrange(1,4))])
        ) for _ in range(n)
    ]

def gen_posts(users, max_posts_per):
    res = []
    for user_id, _ in enumerate(users, 1):
        res.extend([
            (
                str(fake.date_between_dates(date_start=datetime(2017, 12, 31))) + ' ' +  fake.date('%H:%M:%S'),
                ' '.join([fake.word() for _ in range(randrange(1,4))]),
                fake.text(140),
                user_id
            ) for _ in range(randrange(max_posts_per))
        ])
    return res

def gen_attachments(posts):
    res = []
    for post_id, _ in enumerate(posts, 1):
        post_attachments, num = set(), randrange(10)
        # make sure we don't attach the same resource to the same post
        while len(post_attachments) < num:
            post_attachments.add([fake.url, fake.image_url][randrange(2)]())
        res.extend([
            (
                post_id,
                attachment
            ) for attachment in post_attachments
        ])
    return res

def gen_members(users, groups):
    res = []
    for group_id, _ in enumerate(groups, 1):
        group_members = sample(range(1, len(users)+1), randrange(1, 30))
        res.extend([
            (
                group_id,
                member
            ) for member in group_members
        ])
    return res

def gen_followers(users, max_followers):
    res = []
    for user_id, _ in enumerate(users, 1):
        followed_by = sample(range(1, len(users)+1), randrange(max_followers))
        res.extend(
            (
                follower,
                user_id
            ) for follower in followed_by if follower != user_id # can't follow myself
        )
    return res

def gen_subscribers(users, topics, max_topics):
    res = []
    for user_id, _ in enumerate(users, 1):
        subscribed_topics = sample(range(1, len(topics)+1), randrange(max_topics))
        res.extend([
            (
                user_id,
                topic
            ) for topic in subscribed_topics
        ])
    return res

def gen_presented(users, posts, max_presented):
    res = []
    for user_id, _ in enumerate(users, 1):
        presented = sample(range(1, len(posts)+1), randrange(max_presented))
        res.extend([
            (
                user_id,
                post
            ) for post in presented
        ])
    return res

def gen_liked(users, posts, max_engagement):
    res = []
    for post_id, _ in enumerate(posts, 1):
        engaged = sample(range(1, len(users)+1), randrange(max_engagement))
        res.extend([
            (
                user,
                post_id,
                [-1, 1, 1, 1][randrange(4)] # let's have a user be more likely to upvote
            ) for user in engaged
        ])
    return res

def gen_responses(posts):
    res = []
    for post_id, _ in enumerate(posts, 1):
        # 30 % chance it's a response
        if randrange(0, 10) < 3:
            res.extend([
                (
                    post_id,
                    randrange(1, post_id)
                )
            ])
    return res

def gen_post_topics(posts, topics):
    res = []
    for post_id, _ in enumerate(posts, 1):
        post_topics = sample(range(1, len(topics)+1), randrange(10))
        res.extend([
            (
                post_id,
                topic
            ) for topic in post_topics
        ])
    return res

with open('insertData.sql', 'w+') as fw:
    fw.write('/* This file was generated by gen_data.py */\n\n')

    users = gen_users(1000)
    groups = gen_groups(100)
    topics = gen_topics(700)
    posts = gen_posts(users, 10)
    attachments = gen_attachments(posts)

    # write as a string in sql and handle escapes
    def meta_string(token):
        buf = '\''
        for c in token:
            if c == '\'':
                buf += '\''
            buf += c
        return buf+'\''

    # write the sql to populate a table
    def populate(table_name, attrs, rows):
        fw.write('insert into {} ({}) values \n'.format(table_name, ','.join(attrs)))
        for i, row in enumerate(rows):
            fw.write('({}){}'.format(
                ','.join(
                    [
                        meta_string(col_val) if isinstance(col_val, str)
                        else str(col_val)
                        for col_val in (row if isinstance(row, tuple) else [row])
                    ])
                , ';\n' if i == len(rows)-1 else ',\n'
            ))
        fw.write('\n')

    populate(
        'User',
        [
            'firstName',
            'lastName',
            'birthYear',
            'birthMonth',
            'birthDay',
            'gender',
            'email',
            'profileImageURL'
        ],
        users
    )

    populate(
        'UserGroup',
        [
            'name',
            'description'
        ],
        groups
    )

    populate(
        'Topic',
        [
            'title'
        ],
        topics
    )

    populate(
        'Post',
        [
            'createdAt',
            'title',
            'contentText',
            'userID'
        ],
        posts
    )

    populate(
        'Attachment',
        [
            'postID',
            'URL'
        ],
        attachments
    )

    populate(
        'Member',
        [
            'groupID',
            'userID',
        ],
        gen_members(users, groups)
    )

    populate(
        'Follower',
        [
            'followerID',
            'followedByID',
        ],
        gen_followers(users, 50)
    )

    populate(
        'Subscriber',
        [
            'userID',
            'topicID',
        ],
        gen_subscribers(users, topics, 5)
    )

    populate(
        'Presented',
        [
            'userID',
            'postID'
        ],
        gen_presented(users, posts, 50)
    )

    populate(
        'Liked',
        [
            'userID',
            'postID',
            'value'
        ],
        gen_liked(users, posts, 150)
    )

    populate(
        'Response',
        [
            'responseID',
            'respondedByID'
        ],
        gen_responses(posts)
    )

    populate(
        'PostTopic',
        [
            'postID',
            'topicID'
        ],
        gen_post_topics(posts, topics)
    )
